#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define foreach(it, c) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

typedef long long int lli;
typedef pair<int,int> ii;

int DP[11][10]; // DP[n][d] = # of jumpy nums starting with d and with n digits

class JumpyNum {
public:
    void getJumpy(){
        memset(DP,0,sizeof(DP));
        for (int d = 0; d < 10; d++){
            DP[1][d] = 1;
        }
        for (int n = 2; n <= 10; n++){
            // find DP[n]
            for (int d = 0; d < 10; d++){
                for (int e = 0; e < 10; e++){
                    if(abs(d-e) >= 2)
                        DP[n][d] += DP[n-1][e];
                }
            }
        }
    }

    int howMany(int phigh){ // # < phigh
        string h;
        stringstream ss; ss << phigh, ss >> h;

        int ret = 0;
        for (int i = 1; i < h.size(); i++){
            for (int d = 1; d < 10; d++){
                ret += DP[i][d];
            }
        }
        
        for (int i = 0; i < h.size(); i++){
            // differ at h[i]
            for (int d = i == 0 ? 1 : 0; d < int(h[i]-'0'); d++){
                if(i > 0 and abs(int(h[i-1]-'0') - d) < 2)
                    continue;
                ret += DP[int(h.size())-i][d];
            }
            if(i > 0 and abs(h[i]-h[i-1]) < 2)
                break;
        }
        return ret;
    }

    int howMany(int low, int high) {
        getJumpy();
        return howMany(high+1) - howMany(low);
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	JumpyNum *obj;
	int answer;
	obj = new JumpyNum();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 10;
	p2 = 9;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	p1 = 23;
	p2 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2000000000;
	p1 = 2000000000;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 8000;
	p1 = 20934;
	p2 = 3766;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
