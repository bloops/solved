#include <vector>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <ctime>
#include <cstring>

using namespace std;

#define foreach(it, c) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

const int MOD = 1000000009;
const int MAXSUF = 310;

class RequiredSubstrings {
public:
    vector<string> suffixes;
    int edge[MAXSUF][26]; // edge[s][a] = longest suffix that is a prefix of a suffixes[s]
    int contains[MAXSUF]; // contains[s] = set of words which are a prefix of suffixes[s]

    // count[l][bitmask][s] = number of words of length l, which contains 
    // words exactly from bitmask (i.e. no word from ~bitmask) as substrings 
    // and has longest prefix from suffixes as suffixes[s]
    int count[55][64][MAXSUF]; 

    int solve(vector <string> words, int C, int L) {

        // set of suffixes (length, suffix)
        set< pair<int, string> > suffixSet;
        foreach(w,words){
            for (int i = 0; i <= w->size(); i++){
                suffixSet.insert(make_pair(w->size()-i,w->substr(i)));
            }
        }

        // suffixes are sorted by length
        foreach(s,suffixSet){
            suffixes.push_back(s->second);
        }

        // compute edge
        for (int i = 0; i < suffixes.size(); i++){
            for(char c = 'a'; c <= 'z'; c++){
                int a = c-'a';
                // find edge[i][a]
                // edge[i][a] = longest suffixes[j] which is a prefix of a suffixes[i]
                // note that this will always be atleast the empty suffix
                string as = string(1,c) + suffixes[i];
                for (int j = suffixes.size()-1; j >= 0; j--){
                    if(suffixes[j] == as.substr(0,suffixes[j].size())){
                        edge[i][a] = j;
                        break;
                    }
                }
            }
        }
        
        // compute contains
        for (int i = 0; i < suffixes.size(); i++){
            for (int j = 0; j < words.size(); j++){
                if(words[j] == suffixes[i].substr(0,words[j].size()))
                    contains[i] |= (1<<j);
            }
        }

        // count
        count[0][0][0] = 1; // length 0, empty set, empty string

        // 50 * 2^6 * (50 * 6) * 26 = ~ 2.5e7 iterations
        for (int i = 0; i < L; i++){
            for (int bitmask = 0; bitmask < (1 << words.size()); bitmask++){
                for (int s = 0; s < suffixes.size(); s++){
                    for (int a = 0; a < 26; a++){
                        int s2 = edge[s][a];
                        int newmask = bitmask | contains[s2];
                        count[i+1][newmask][s2] += count[i][bitmask][s];
                        count[i+1][newmask][s2] %= MOD;
                    }   
                }
            }
        }
        
        int ans = 0;
        for (int bitmask = 0; bitmask < (1 << words.size()); bitmask++){
            if(__builtin_popcount(bitmask) != C)
                continue;
            for (int s = 0; s < suffixes.size(); s++){
                ans += count[L][bitmask][s];
                ans %= MOD;
            }
        }
        return ans;
    }
};

// BEGIN KAWIGIEDIT TESTING

// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	RequiredSubstrings *obj;
	int answer;
	obj = new RequiredSubstrings();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"a","aa","aaa","aaaa"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	p3 = 50;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"abcdefgh"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 7;
	p3 = 31810104;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"abcdefgh"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 7;
	p3 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"a","b","c","d"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 3;
	p3 = 24;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"ab","bc","xy","yz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}

// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
