#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define foreach(it, c) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

typedef long long int lli;
typedef pair<int,int> ii;

const int INF = 1<<30;

// DP[i][j][rev] = min number of moves to match rev ? goal [j..i] : goal[i..j] 

typedef pair<string, string> ss;
map<ss, int> memo;

class ReversalChain {
public:

    int solve(string s, string t){
        ss p = ss(s,t);
        if(memo.count(p)){
            return memo[p];
        }
        
        if(s == t){
            return memo[p] = 0;
        }

        int ans = INF;
        for (int b = 0; b < 2; b++){
            if(b == 1){
                reverse(s.begin(),s.end());
                reverse(t.begin(),t.end());
            }
            if(s[0] == t[0]){
                string s1 = s.substr(1), t1 = t.substr(1);
                ans = min(ans, solve(s1,t1));
                reverse(s1.begin(),s1.end());
                ans = min(ans, 1 + solve(s1,t1));
            }
        }

        return memo[p] = ans;
    }

    int minReversal(string init, string goal) {
        int ret = solve(init, goal);
        reverse(init.begin(),init.end());
        ret = min(ret, 1 + solve(init, goal));
        return ret < INF ? ret : -1;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ReversalChain *obj;
	int answer;
	obj = new ReversalChain();
	clock_t startTime = clock();
	answer = obj->minReversal(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "1100";
	p1 = "0110";
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "111000";
	p1 = "101010";
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "0";
	p1 = "1";
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "10101";
	p1 = "10101";
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "111000111000";
	p1 = "001100110011";
	p2 = 4;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
