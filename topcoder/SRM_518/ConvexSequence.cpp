#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <ctime>

using namespace std;

#define foreach(it, c) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

typedef long long int lli;
typedef pair<int,int> ii;
const int INF = 1<<30;

class ConvexSequence {
public:
    long long getMinimum(vector <int> a) {
        if(a.size() < 3)
            return 0;
        int n = a.size()-1;
        vector<lli> A(n);
        for (int i = 0; i < n; i++){
            A[i] = a[i+1] - lli(a[i]);
        }

        // make everything non-negative
        int minA = *min_element(A.begin(),A.end());
        if(minA < 0) 
            for(int i = 0; i < A.size(); i++) 
                A[i] += -minA;

        lli answer = 0;
        for (int i = 1; i < n; i++){
            int j = i-1;
            while(A[i-1] > A[i]){
                // make A[j]...A[i-1] the maximal equal suffix
                while(j > 0 and A[j] == A[j-1]){
                    j--;
                }

                int width = i-j;
                int height = j == 0 ? A[j] : A[j] - A[j-1];
                int heightDiff = A[i-1] - A[i];
                
                int y = (heightDiff < width) ? 0 : 1 + ((heightDiff - width)/(width + 1));
                
                if(y >= height){
                    // need to move atleast the whole chunk
                    A[i] += height * width;
                    for (int k = j; k <= i-1; k++){
                        A[k] -= height;
                        answer += height * (i-k);
                    }
                    // try the new maximal equal suffix 
                    // (if j < 0) it should be fixed already
                    j--;
                    continue;
                }

                // y < height : we can fix it!
                A[i] += y * width;
                for (int k = j; k <= i-1; k++){
                    A[k] -= y;
                    answer += y * (i-k);
                }

                // now less than width transfer should fix it
                int k = j;
                while(A[i-1] > A[i]){
                    A[k]--;
                    answer += i-k;
                    A[i]++;
                    k++;
                }

                break; // done
            }
        }
        return answer;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    ConvexSequence *obj;
    long long answer;
    obj = new ConvexSequence();
    clock_t startTime = clock();
    answer = obj->getMinimum(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
	
    vector <int> p0;
    long long p1;

    {
        int t0[] = {854159326, 317144183, 781399725, 287076509, 894967145, 882577367, 174517516, 134415519, 274494874, 709819883, 59717133, 0, 40551288, 232526958, 811785438, 930853743, 946882902, 321325300, 397702677, 376192501, 599310562, 889156198, 135776890, 882710939, 823196361, 681959076, 318666702, 94469186, 536320456, 0, 530320850, 436708006, 903344748, 659080120, 774722507, 967315412, 566063635, 43970906, 497687103, 781266213, 876086123, 366960001, 587364849, 191948103, 172568553, 539762057, 83507466, 71569625, 686305822, 663789601};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 20480185116;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    }
	
    {
        // ----- test 0 -----
        int t0[] = {6,5,1,5,3,3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 7ll;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
	
    {
        // ----- test 1 -----
        int t0[] = {3,0,1,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0ll;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }
	
    {
        // ----- test 2 -----
        int t0[] = {1,1,1,0,2,2,2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 5ll;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }
	
    {
        // ----- test 3 -----
        int t0[] = {854159326,317144183,781399725,287076509,894967145,882577367,174517516,134415519,274494874,709819883,59717133,732212854,40551288,232526958,811785438,930853743,946882902,321325300,397702677,376192501,599310562,889156198,135776890,882710939,823196361,681959076,318666702,94469186,536320456,116468376,530320850,436708006,903344748,659080120,774722507,967315412,566063635,43970906,497687103,781266213,876086123,366960001,587364849,191948103,172568553,539762057,83507466,71569625,686305822,663789601};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 20178337330ll;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }
	
    {
        // ----- test 4 -----
        int t0[] = {5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0ll;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }
	
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
