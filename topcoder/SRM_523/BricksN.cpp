#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

typedef long long int lli;

const lli MOD = 1000000007;

class BricksN {
public:
    int partitions[55]; // partitions[i][k] = no of ways to make contiguous blocks of length i using 1..k
    int count[55][55]; // count[w][h] = # of ways to structures on a base of length w
// with height atmost h (not including base w)

    int countStructures(int w, int h, int k) {
        partitions[0] = 1;            
        for (int i = 1; i <= w; i++){
            for (int j = 1; j <= k; j++){
                if(i-j >= 0){
                    partitions[i] += partitions[i-j];
                    partitions[i] %= MOD;
                }
            }
        }

        for (int hi = 0; hi <= h; hi++){
            for (int wi = 0; wi <= w; wi++){
                // find count[wi][hi]

                count[wi][hi] = 1;                // no blocks at all

                for (int i = 1; i <= wi; i++){
                    for (int j = i; j <= wi; j++){
                        // put the last block [i..j]
                        int last = j-i+1;                       
                        int multterm = (partitions[last] * (lli)count[last][hi-1]) % MOD;
                        if( i >= 2 )
                            multterm = (multterm * (lli)count[i-2][hi]) % MOD;
                        count[wi][hi] += multterm;
                        count[wi][hi] %= MOD;
                    }
                }
            }
        }
        return count[w][h];
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	BricksN *obj;
	int answer;
	obj = new BricksN();
	clock_t startTime = clock();
	answer = obj->countStructures(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 1;
	p2 = 3;
	p3 = 13;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 2;
	p2 = 3;
	p3 = 83;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 5;
	p2 = 1;
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 10;
	p2 = 3;
	p3 = 288535435;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
