#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

typedef long long int lli;

const int MAXP = 200010;
const int MOD = 1000000007;

// score[bitmask][p] = # of ways to get exactly p points by solving {bitmask} problems
int score[8][MAXP];
    
// scoreboard[i][p] = # of scoreboards considering 0..i, with ith coder having p points
int scoreboard[20][MAXP];
int scoreboardSuffixSum[20][MAXP];

class SRMIntermissionPhase {
public:

    int countWays(vector <int> points, vector <string> description) {

        int n = description.size();
        int totalPoints = points[0] + points[1] + points[2];

        score[0][0] = 1;
        for (int bitmask = 1; bitmask < 8; bitmask++){
            int lpoints = 0, submask = 0;
            for (int j = 2; j >= 0; j--){
                if(bitmask & (1<<j)){
                    lpoints = points[j];
                    submask = bitmask - (1<<j);
                    break;
                }
            }
            // get score[bitmask][..] from score[submask][..] 
            // score[b][i] contributes to score[s][i+1, i+2, ...i+lp]
            
            int accum = 0;
            for (int i = 0; i <= totalPoints; i++){
                score[bitmask][i] = accum;
                accum += score[submask][i];
                if(i-lpoints >= 0){
                    accum -= score[submask][i-lpoints];
                }
                accum %= MOD;
            }
        }

        for (int i = 0; i < n; i++){
            for (int p = 0; p <= totalPoints; p++){
                int solvedmask = 0;
                for (int j = 0; j < 3; j++){
                    if(description[i][j] == 'Y')
                        solvedmask |= (1<<j);
                }
                scoreboard[i][p] = score[solvedmask][p];
                if(i > 0){
                    scoreboard[i][p] = (lli(scoreboardSuffixSum[i-1][p+1]) * 
                                        lli(scoreboard[i][p])) % MOD;
                    scoreboard[i][p] %= MOD;
                }
            }
            for (int p = totalPoints; p >= 0; p--){
                scoreboardSuffixSum[i][p] = scoreboard[i][p] + scoreboardSuffixSum[i][p+1];
                scoreboardSuffixSum[i][p] %= MOD;
            }
        }
        return scoreboardSuffixSum[n-1][0];
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SRMIntermissionPhase *obj;
	int answer;
	obj = new SRMIntermissionPhase();
	clock_t startTime = clock();
	answer = obj->countWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {25000,50000,100000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"YNN","NNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 25000;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {30000,60000,90000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYN","NYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 799969993;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {25000,45000,110000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NNN","YYY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {25600,51200,102400};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYY","YNY","YYY","YNN","YYN","NNY","NYN","NNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 867560805;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
