#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

#define foreach(it, c) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

typedef long long int lli;
typedef pair<int,int> ii;

// DP[i,npassed,nchallenged] = # of scoreboards considering coder 0...i,
// and the ith coder has exactly npassed passes and nchallenged challenged solns

const int MOD = 1000000007;

class SRMSystemTestPhase {
public:
    lli DP[55][4][4];  

    int countWays(vector <string> description) {
        int n = description.size();
        memset(DP,0,sizeof(DP));
        for (int i = 0; i < n; i++){
            for (int mask = 0; mask < 27; mask++){
                int npassed = 0, nchallenged = 0;
                int tmask = mask, bit = 0;
                bool valid = true;
                for (int j = 0; j < 3; j++){
                    bit = tmask % 3, tmask /= 3;
                    if(bit > 0 and description[i][j] == 'N')
                        valid = false;
                    if(description[i][j] == 'N')
                        continue;
                    if(bit == 2)
                        npassed++;
                    else if(bit == 1)
                        nchallenged++;
                }
                if(!valid)
                    continue;
                if(i == 0){
                    DP[i][npassed][nchallenged]++;
                    continue;
                }

                // take those i-1 scoreboards where the i-1 th coder
                // has < npassed passes
                for (int p = 3; p > npassed; p--){
                    for (int c = 0; c <= 3; c++){
                        DP[i][npassed][nchallenged] += DP[i-1][p][c];
                        DP[i][npassed][nchallenged] %= MOD;
                    }
                }

                // take those i-1 scoreboards where the i-1 th coder
                // has npassed passed solns and at most nchallenged challenges
                for (int c = 0; c <= nchallenged; c++){
                    DP[i][npassed][nchallenged] += DP[i-1][npassed][c];
                    DP[i][npassed][nchallenged] %= MOD;
                }
                

            }
        }

        lli ans = 0;
        for (int npassed = 0; npassed <= 3; npassed++){
            for (int nchallenged = 0; nchallenged <= 3; nchallenged++){
                ans += DP[n-1][npassed][nchallenged];
                ans %= MOD;
            }
        }
        
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SRMSystemTestPhase *obj;
	int answer;
	obj = new SRMSystemTestPhase();
	clock_t startTime = clock();
	answer = obj->countWays(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"YYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 27;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"YNN","NYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"YNN","NNN","NNY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NNN","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"YYY","YNY","NYY","YYN","YYY","YNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 15176;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
