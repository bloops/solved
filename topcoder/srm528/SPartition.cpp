#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <iostream>
using namespace std;


typedef long long int lli;

const int N = 45;

class SPartition {
public:
    int n;
    string A;

    map<string,lli> DP[N];

    lli solve(int i, const string& s){
        if(DP[i].find(s) != DP[i].end())
            return DP[i][s];

        if(i == n){
            return DP[i][s] = s.empty() ? 1 : 0;
        }

        if(s.empty()){
            return DP[i][s] = 2 * solve(i+1,string(1,A[i]));
        }

        string pre = s.substr(1);
        for (int j = i; j < n; j++){
            if(pre.length() > n/2 or pre.length() > n-j-1)
                break;
            if(A[j] == s[0]){
                DP[i][s] += solve(j+1,pre);
            }
            pre += A[j];
        }
        
        return DP[i][s];
    }

    long long getCount(string _A) {
        A = _A;
        n = A.size();

        // DP[i][s] = number of ways to choose a subseq X of A[i..n-1] 
        // such that X = sY where Y = ~X
        // note that answer = DP[0][""] 
        // DP[i][""] = 2 * DP[i+1][s[i]]
        // DP[i][s] = sum_j>=i if A[j] == s[0] then DP[j+1][ s[1..].A[i..j-1] ] (choose first of X)

        return solve(0,"");
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SPartition *obj;
	long long answer;
	obj = new SPartition();
	clock_t startTime = clock();
	answer = obj->getCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	long long p1;


	{
	// ----- test 3 -----
	p0 = "xoxoxoxoxoxoxoxoxoxoxoxxxoooxoxoxoxoxoxo";
	p1 = 73676ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	

	
	{
	// ----- test 4 -----
        p0 = "xxxx";
        p1 = 6ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	

	{
	// ----- test 1 -----
	p0 = "oooxxx";
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "ooxxoxox";
	p1 = 8ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	
	{
	// ----- test 2 -----
	p0 = "xoxxox";
	p1 = 4ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}	

	{
	// ----- test 0 -----
	p0 = "oxox";
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
