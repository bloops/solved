#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define foreach(it, c) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

typedef long long int lli;
typedef pair<int,int> ii;

class LargestGap {
public:
    vector< pair<vector<int>, int> > sols;

    bool better(const vector<int>& a, const vector<int>& b){
        int n = a.size();
        for (int i = 0; i < n; i++){
            if(a[i] != b[i])
                return a[i] > b[i];
        }
        return false;
    }

    int getLargest(vector <string> _board) {
        string board;
        for (int i = 0; i < _board.size(); i++){
            board += _board[i];
        }

        vector<int> gaps;
        int n = board.size();
        for (int i = 0; i < board.size(); i++){
            // consider block starting at i

            if(board[(i+n-1) % n] == '.' and board[i] == 'X'){
                int k = (i+1) % n;
                while(board[k] != '.'){
                    k++; k %= n;
                }
                string A;
                while(k != i){
                    A += board[k];
                    k++; k%=n;
                }

                gaps.clear();
                int lastgap = 0;
                for (int j = 0; j < A.size(); j++){
                    if(A[j] == 'X' and lastgap > 0){
                        gaps.push_back(lastgap);
                        lastgap = 0;
                    }
                    if(A[j] == '.')
                        lastgap++;
                }
                int endgap = 0;
                while(A[A.size()-endgap-1] == '.') endgap++;
                gaps[0] += endgap;

                int ri = i, mi = i;
                while(board[ri] == 'X'){
                    mi = min(mi,ri);
                    ri++;
                    ri %= board.size();
                }

                sort(gaps.rbegin(),gaps.rend());
                sols.push_back(make_pair(gaps,mi));
            }
        }

        // find best sol
        int ret = sols[0].second, besti = 0;
        for (int i = 1; i < sols.size(); i++){
            if(sols[i].first == sols[besti].first)
                ret = min(ret, sols[i].second);
            else {
                if(better(sols[i].first, sols[besti].first)){
                    ret = sols[i].second;
                    besti = i;
                }
            }
        }
        return ret;
        
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	LargestGap *obj;
	int answer;
	obj = new LargestGap();
	clock_t startTime = clock();
	answer = obj->getLargest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"X.XX...X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"XXXX","....","XXXX","....","XXXX","...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"XXX.........XX...........XX..X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"XXX","X.....","....XX..XXXXXX","X........X..",".XXX."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 32;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
