#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define foreach(it, c) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

typedef long long int lli;
typedef pair<int,int> ii;
lli P[22], S[22]; // # of palindromes with n digits = # of no.s with (n+1)/2 digits

class IntegerPalindrome {
public:
    long long findByIndex(int K) {
        for (int i = 1; i <= 20; i++){
            P[i] = 9 * lli(pow(10.0,(i+1)/2 - 1)) + 1e-8;
            S[i] = S[i-1] + P[i];
        }

        int n = 0; // how many digit palindrome do we want?
        // need lowest i such that K < S[i]
        for (int i = 1; i <= 20; i++){
            if(K < S[i]){
                n = i;
                K -= S[i-1];
                break;
            }
        }
        
        // find Kth palindrome with n digits
        lli p = pow(10.0,(n+1)/2-1) + 1e-8;
        p += K;

        string s;                               
        stringstream ss;
        ss << p, ss >> s;
        string t = n % 2 == 0 ? s : s.substr(0,int(s.size())-1);
        reverse(t.begin(),t.end());
        s += t;
        ss.clear();
        ss << s, ss >> p;
        return p;
    }

};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	IntegerPalindrome *obj;
	long long answer;
	obj = new IntegerPalindrome();
	clock_t startTime = clock();
	answer = obj->findByIndex(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 8;
	p1 = 9ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	p1 = 11ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 19;
	p1 = 111ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 235;
	p1 = 13731ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 23746;
	p1 = 137484731ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
