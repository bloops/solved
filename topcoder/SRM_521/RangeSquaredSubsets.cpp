#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define iter(c) typeof(c.begin())
#define foreach(it, c) for(iter(c) it = c.begin(); it != c.end(); it++)

typedef long long int lli;
typedef pair<int,int> ii;
const int INF = 1<<30;

class RangeSquaredSubsets {
public:
    set< pair<ii,ii> > subsets;
    vector<int> x, y;
    int nlow, nhigh; 

    void count(int x0, int y0, bool openX, bool openY){
        vector<ii> points; // (distance, index)
        for (int i = 0; i < x.size(); i++){
            if( (!openX and x[i] < x0) or (openX and x[i] >= x0))
                continue;
            if( (!openY and y[i] < y0) or (openY and y[i] >= y0))
                continue;
            points.push_back(ii(max(abs(x[i]-x0),abs(y[i]-y0)),i));
        }

        sort(points.begin(),points.end());
        int xmin = INF, xmax = -INF, ymin = INF, ymax = -INF;
        for (int i = 0; i < points.size(); i++){
            // include point i
            xmin = min(xmin,x[points[i].second]);
            xmax = max(xmax,x[points[i].second]);
            ymin = min(ymin,y[points[i].second]);
            ymax = max(ymax,y[points[i].second]);

            // you can draw any square with n \in [di, di+1)
            int di = points[i].first;
            int di1 = i+1 < points.size() ? points[i+1].first : INF;
            if(di1 == di)
                continue;
            // check intersection of [nlow, nhigh] with [di,di1)
            if(max(nlow,di) <= min(nhigh,di1-1)){
                subsets.insert( pair<ii,ii> ( ii(xmin,xmax), ii(ymin,ymax)) );
            }
        }
    }

    long long countSubsets(int _nlow, int _nhigh, vector <int> _x, vector <int> _y) {
        nlow = _nlow, nhigh = _nhigh;
        x = _x, y = _y;
        
        for (int ix = 0; ix < x.size(); ix++){
            for (int iy = 0; iy < y.size(); iy++){
                for (int bx = 0; bx < 2; bx++){
                    for (int by = 0; by < 2; by++){
                        count(x[ix],y[iy],bx,by);
                    }
                }
            }
        }
        return subsets.size();
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	RangeSquaredSubsets *obj;
	long long answer;
	obj = new RangeSquaredSubsets();
	clock_t startTime = clock();
	answer = obj->countSubsets(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	long long p4;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 5;
	int t2[] = {-5,0,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 10;
	int t2[] = {-5,0,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 100;
	int t2[] = {-5,0,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 6ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 100000000;
	int t2[] = {-1,-1,-1,0,1,1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {-1,0,1,1,-1,0,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 21ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 64;
	p1 = 108;
	int t2[] = {-56,-234,12,324,-12,53,0,234,1,12,72};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {6,34,2,235,234,234,342,324,234,234,234};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 26ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
