#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define foreach(it, c) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)

typedef long long int lli;
typedef pair<int,int> ii;

#include <string.h>

const int M = 65, N = 65;

bool graph[M][N];
bool seen[N];
int matchL[M], matchR[N];
int n;

bool bpm( int u )
{
    for( int v = 0; v < n; v++ ) if( graph[u][v] )
    {
        if( seen[v] ) continue;
        seen[v] = true;

        if( matchR[v] < 0 || bpm( matchR[v] ) )
        {
            matchL[u] = v;
            matchR[v] = u;
            return true;
        }
    }
    return false;
}

bool perfect(){
    memset( matchL, -1, sizeof( matchL ) );
    memset( matchR, -1, sizeof( matchR ) );
    int cnt = 0;
    for( int i = 0; i < n; i++ )
    {
        memset( seen, 0, sizeof( seen ) );
        if( bpm( i ) ) cnt++;
    }
    return cnt == n;
}

bool consistent(const string& a, const string& b){
    for(int i = 0; i < a.size(); i++)
        if((a[i] == '0' and b[i] == '1') or (a[i] == '1' and b[i] == '0'))
            return false;
    return true;
}

bool perfectmatch(const vector<string>& rows, const vector<string>& columns){
    n = rows[0].size();
    // graph[i][j] == 1 if and only if the ith column of the real matrix
    // is consistent with column[j]
    string a;
    memset(graph,0,sizeof(graph));
    for(int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
            a = columns[0];
            for(int k = 0; k < rows.size(); k++)
                a[k] = rows[k][i];
            graph[i][j] = consistent(a,columns[j]);
        }
    }
    return perfect();
}

class P8XMatrixRecovery {
public:
    vector <string> solve(vector <string> rows, vector <string> columns) {
        for(int i = 0; i < rows.size(); i++){
            for(int j = 0; j < rows[0].size(); j++){
                if(rows[i][j] != '?')
                    continue;
                rows[i][j] = '0';
                if(perfectmatch(rows,columns))
                    continue;
                rows[i][j] = '1';
            }
        }
        return rows;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	P8XMatrixRecovery *obj;
	vector <string> answer;
	obj = new P8XMatrixRecovery();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
    };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
    };
    
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
    };

        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0","?","1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0?1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"0","0","1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"10","01"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"10","01"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"10","01"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"?" "?0","11?","?01","1?1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"1?" "?" "?","?111","0?1?"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"010","110","101","101"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
